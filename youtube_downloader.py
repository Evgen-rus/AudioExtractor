import os
from datetime import datetime
from yt_dlp import YoutubeDL
from moviepy.editor import AudioFileClip
from typing import Optional, Tuple
import time
import logging

class YouTubeDownloader:
    def __init__(self, output_dir: str = "output", cookies_file: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        self.logger = logging.getLogger('YouTubeDownloader')
        self.logger.setLevel(logging.DEBUG)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler('youtube_downloader.log', encoding='utf-8')
        file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(file_formatter)
        self.logger.addHandler(file_handler)
        
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
        self.ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'extract_flat': True,
            'quiet': True,
            'no_warnings': True,
            'nocheckcertificate': True,
            'ignoreerrors': True,
            'no_check_certificate': True,
            'extractor_args': {
                'youtube': {
                    'skip': ['dash', 'hls'],
                }
            }
        }
        
        if cookies_file:
            self.ydl_opts['cookiefile'] = cookies_file
            print(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ —Ñ–∞–π–ª–∞: {cookies_file}")
    
    def sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        return filename
    
    def get_video_info(self, url: str) -> Tuple[str, str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        self.logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è URL: {url}")
        try:
            self.logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            with YoutubeDL(self.ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                if info:
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ")
                    return (
                        self.sanitize_filename(info['title']),
                        info.get('uploader', 'Unknown'),
                        info.get('duration', 0)
                    )
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {str(e)}")
            return None
    
    def download_audio(self, 
                      url: str, 
                      filename: Optional[str] = None,
                      quality: str = "high") -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å YouTube"""
        self.logger.debug(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –¥–ª—è URL: {url}")
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            if not filename:
                info = self.get_video_info(url)
                if info:
                    title, _, _ = info
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{timestamp}_{title}.mp3"
                else:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{timestamp}_video.mp3"
            
            output_path = os.path.join(self.output_dir, filename)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            download_opts = {
                **self.ydl_opts,
                'outtmpl': output_path[:-4],
                'quiet': False,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192' if quality == 'high' else '128',
                }],
            }
            
            print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...")
            with YoutubeDL(download_opts) as ydl:
                error_code = ydl.download([url])
                if error_code != 0:
                    raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
            
            if os.path.exists(output_path):
                print(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                return output_path
            else:
                raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}", exc_info=True)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
            return None

def main():
    print("=== YouTube Audio Downloader ===")
    print("–ï—Å–ª–∏ –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (—Å–º. https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp)")
    print("2. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É cookies.txt")
    print("3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ cookies\n")
    
    cookies_path = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É cookies (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    downloader = YouTubeDownloader(cookies_file=cookies_path if cookies_path else None)
    
    while True:
        print("\n=== –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ===")
        url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        
        if url.lower() == 'q':
            break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
        if not url.startswith(('https://www.youtube.com/', 'https://youtu.be/')):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞:")
            print("   https://www.youtube.com/watch?v=XXXXXXXXXXX")
            print("   https://youtu.be/XXXXXXXXXXX")
            continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        try:
            info = downloader.get_video_info(url)
            if not info:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                continue
            
            title, author, duration = info
            minutes = duration // 60
            seconds = duration % 60
            
            print(f"\n–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ:")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
            print(f"–ê–≤—Ç–æ—Ä: {author}")
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}:{seconds:02d}")
            
            # –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
            while True:
                quality = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ (h - –≤—ã—Å–æ–∫–æ–µ, l - –Ω–∏–∑–∫–æ–µ): ").strip().lower()
                if quality in ['h', 'l']:
                    break
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'h' –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∏–ª–∏ 'l' –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            result = downloader.download_audio(url, quality='high' if quality == 'h' else 'low')
            if result:
                print("\n–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç? (y/n)")
                if input().strip().lower() == 'y':
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
                    pass
        
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}") 